{"version":3,"sources":["index.js"],"names":["CountdownTimer","constructor","selector","targetDate","start","getTimeComp","dayIndex","document","querySelector","hourIndex","minuteIndex","secIndex","setInterval","startTime","Date","now","lastTime","getTime","timeComp","updateTimeLast","pad","value","String","padStart","time","days","Math","floor","hours","mins","secs","textContent","timer","summer"],"mappings":";;;AAqDA,aArDA,QAAA,oBAEA,MAAMA,EACFC,aAAY,SAACC,EAAD,WAAWC,IACdC,KAAAA,QACAC,KAAAA,cACAH,KAAAA,SAAWA,EACXC,KAAAA,WAAaA,EAEbG,KAAAA,SAAWC,SAASC,iBAAiBN,yBACrCO,KAAAA,UAAYF,SAASC,iBAAiBN,0BACtCQ,KAAAA,YAAcH,SAASC,iBAAiBN,yBACxCS,KAAAA,SAAWJ,SAASC,iBAAiBN,yBAG9CE,QACIQ,YAAa,KACHC,MAAAA,EAAYC,KAAKC,MACjBC,EAAW,KAAKb,WAAWc,UAAYJ,EACvCK,EAAW,KAAKb,YAAYW,GAC7BG,KAAAA,eAAeD,IACtB,KAGNE,IAAIC,GACOC,OAAAA,OAAOD,GAAOE,SAAS,EAAG,KAGrClB,YAAYmB,GASH,MAAA,CAACC,KARKC,KAAKC,MAAMH,EAAQ,OAQlBI,MANA,KAAKR,IAAIM,KAAKC,MAAOH,EAAQ,MAAyB,OAM/CK,KAJR,KAAKT,IAAIM,KAAKC,MAAOH,EAAQ,KAAoB,MAInCM,KAFd,KAAKV,IAAIM,KAAKC,MAAOH,EAAQ,IAAc,OAK5DL,gBAAe,KAACM,EAAD,MAAOG,EAAP,KAAcC,EAAd,KAAoBC,IAC5BxB,KAAAA,SAASyB,YAAcN,EACvBhB,KAAAA,UAAUsB,YAAcH,EACxBlB,KAAAA,YAAYqB,YAAcF,EAC1BlB,KAAAA,SAASoB,YAAcD,GAIhC,MAAME,EAAQ,IAAIhC,EAAe,CAC7BE,SAAU,WACVC,WAAY,IAAIW,KAAK,kBAGnBmB,EAAS,IAAIjC,EAAe,CAC9BE,SAAU,UACVC,WAAY,IAAIW,KAAK","file":"src.5e76f849.js","sourceRoot":"../src","sourcesContent":["import './sass/main.scss';\n\nclass CountdownTimer {\n    constructor({selector, targetDate}) {\n        this.start();\n        this.getTimeComp();\n        this.selector = selector;\n        this.targetDate = targetDate;\n\n        this.dayIndex = document.querySelector(`${selector} [data-value=\"days\"]`)\n        this.hourIndex = document.querySelector(`${selector} [data-value=\"hours\"]`)\n        this.minuteIndex = document.querySelector(`${selector} [data-value=\"mins\"]`)\n        this.secIndex = document.querySelector(`${selector} [data-value=\"secs\"]`)\n    }\n\n    start() {\n        setInterval (() => {\n            const startTime = Date.now();\n            const lastTime = this.targetDate.getTime() - startTime;\n            const timeComp = this.getTimeComp(lastTime)\n            this.updateTimeLast(timeComp)\n        },1000);\n    }\n\n    pad(value) {\n        return String(value).padStart(2, '0')\n    }\n  \n    getTimeComp(time) {\n      const days = Math.floor(time / (1000 * 60 * 60 * 24));\n  \n      const hours = this.pad(Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)));\n  \n      const mins = this.pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\n  \n      const secs = this.pad(Math.floor((time % (1000 * 60)) / 1000));\n  \n      return {days, hours, mins, secs};\n  }\n\n  updateTimeLast({days, hours, mins, secs}) {\n    this.dayIndex.textContent = days;\n    this.hourIndex.textContent = hours;\n    this.minuteIndex.textContent = mins;\n    this.secIndex.textContent = secs;\n    }\n}\n\nconst timer = new CountdownTimer({\n    selector: '#timer-1',\n    targetDate: new Date('Dec 31, 2022'),\n});\n\nconst summer = new CountdownTimer({\n    selector: '#summer',\n    targetDate: new Date('May 31, 2023'),\n});\n\n\n  \n"]}